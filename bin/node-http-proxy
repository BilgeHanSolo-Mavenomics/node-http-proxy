#!/usr/bin/env node

'use strict'

var program = require('commander')
var pm2     = require('pm2')
var os      = require('os')
var async   = require('async')

var common  = require('../lib/common');
var SERVER_ENV = common.SERVER_ENV;

program.on('--help',function(){
    console.log("  ================Basic Example===============")
    console.log('')
    console.log('  SERVER START')
    console.log('  nproxy start -p 8888 -i 1')
    console.log('')
    console.log('  SERVER STOP')
    console.log('  nproxy stop')
    console.log('')
    console.log('  SERVER RESTART')
    console.log('  nproxy restart')
    console.log('')
    console.log('  view more detail at http://github.com/wddqing/node-http-proxy')
    console.log('')
})


//set version
program.version('0.1.4')

//program command
program.command('start')
    .description('start server')
    .option('-i --instance <i>','child process,0 means use max cpu cores',function(i){
        //check instance size
        var cores = os.cpus().length;
        return i > cores? cores : i>0 ? i : 1
    })
    .option('-p --port <p>','listen port')
    .option('-D --debug','open debug mode')
    .action(function(cmd){
        pm2.connect(function(){
            pm2.list(function(err,list){
                async.forEach(list,function(p,_cb){
                    if(p.name == SERVER_ENV.NAME)
                        pm2.stop(SERVER_ENV.NAME,_cb)
                    else
                        _cb()
                },function(err){
                    var argv = ['-p',cmd.port,'-i',cmd.instance,cmd.debug]
//                    console.log('argv',cmd)
                    pm2.start(__dirname + '/main.js',{name:SERVER_ENV.NAME,scriptArgs:argv},function(err,proc){
                        pm2.disconnect(function(err,proc){
                            if(err && cmd.D)console.log(err)
                            process.exit(0)
                        })
                     })
                })
            })
        })
    })

program.command('stop')
    .description('stop server')
    .action(function(cmd){
        pm2.connect(function(){
            pm2.delete(SERVER_ENV.NAME,function(err,proc){
                if(err)console.trace(err)
                pm2.disconnect(function(err,proc){
                    if(err && proc.D)console.trace(err)
                    process.exit(0)
                })
            })
        })
    })

program.command('restart')
    .description('restart server')
    .action(function(cmd){
        pm2.connect(function(){
            pm2.stop(SERVER_ENV.NAME,function(err,proc){
                if(err)console.trace(err)
                pm2.disconnect(function(err){
                    if(err && cmd.D)console.trace(err)
                    process.exit(0)
                })
            })
        })
    })

program.command('alive')
    .description('test server alive')
    .action(function(cmd){
        process.exit(0)
    })

program.command('*')
    .action(function(cmd){
        console.log('    use --help for command usage')
    })

//parse argv
program.parse(process.argv);









